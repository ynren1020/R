##extract data frame as string##
deparse(substitute(df))

##grep rows not containing some specific strings##
known_2vs1<-degs.2vs1[-grep("XLOC_",row.names(degs.2vs1),ignore.case=FALSE,fixed=TRUE),]

##save grid.arrange output##
pdf("filename.pdf", width = 8, height = 12) # Open a new pdf file
grid.arrange(plot1, plot2, plot3, nrow=3) # Write the grid.arrange in the file
dev.off() # Close the file

##modify multiple plot separately and arrange into one figure##
##https://stackoverflow.com/questions/20524630/modify-x-axis-labels-in-each-facet##
library(gridExtra)

##First: subsetting the data

open <- subset(data1, Physicians_Out == "Open")
restr <- subset(data1, Physicians_Out == "Restricted")
closed <- subset(data1, Physicians_Out == "Closed")

##Second: creating the labels for the different subsets

labs.open <- paste(gsub("/","-\n",names(table(open$Physicians_In)),fixed=T),
               "\n(N=",table(open$Physicians_In),")",sep="")
labs.restr <- paste(gsub("/","-\n",names(table(restr$Physicians_In)),fixed=T),
               "\n(N=",table(restr$Physicians_In),")",sep="")
labs.closed <- paste(gsub("/","-\n",names(table(closed$Physicians_In)),fixed=T),
               "\n(N=",table(closed$Physicians_In),")",sep="")
##Third: creating a theme for removing the y-axis labels & text for the 2nd & 3rd sub-graphs

mytheme <- theme(
  axis.title.y = element_blank(),
  axis.text.y = element_blank(),
  axis.ticks.y = element_blank()
)

##Finally: creating the graph

p1 <- ggplot(open,aes(x=Physicians_In,y=share,fill=Physicians_In)) +
  geom_boxplot() + stat_sum_single(mean) + 
  geom_jitter(position = position_jitter(width = .2),color="blue") +
  guides(fill=FALSE) +
  ggtitle(paste("Physician Access (Out): Open\nN = (", nrow(open), ")\n")) +
  scale_y_continuous("Gammagard Share",labels=percent) +
  scale_x_discrete("\nPhysician Access (In Hospital)",labels=labs.open) +
  theme_bw()

p2 <- ggplot(restr,aes(x=Physicians_In,y=share,fill=Physicians_In)) +
  geom_boxplot() + stat_sum_single(mean) + 
  geom_jitter(position = position_jitter(width = .2),color="blue") +
  guides(fill=FALSE) +
  ggtitle(paste("Physician Access (Out): Restricted\nN = (", nrow(restr), ")\n")) +
  scale_x_discrete("\nPhysician Access (In Hospital)",labels=labs.restr) +
  theme_bw() + mytheme

p3 <- ggplot(closed,aes(x=Physicians_In,y=share,fill=Physicians_In)) +
  geom_boxplot() + stat_sum_single(mean) + 
  geom_jitter(position = position_jitter(width = .2),color="blue") +
  guides(fill=FALSE) +
  ggtitle(paste("Physician Access (Out): Closed\nN = (", nrow(closed), ")\n")) +
  scale_x_discrete("\nPhysician Access (In Hospital)",labels=labs.closed) +
  theme_bw() + mytheme

library(gridExtra)

grid.arrange(p1, p2, p3, ncol=3)

##define your own themes##
##I used these themes for boxplot##
##change y axis##
mythemey <- theme(
  #axis.title.y = element_blank(),
  axis.text.y = element_blank(),
  axis.ticks.y = element_blank()
)
##change x and y ##
mythemexy <- theme(
  #axis.title.y = element_blank(),
  axis.text.y = element_blank(),
  axis.ticks.y = element_blank(),
  axis.text.x = element_blank()
  #axis.ticks.x = element_blank()
)
##change x##
mythemex <- theme(
  #axis.title.y = element_blank(),
  #axis.text.y = element_blank(),
  #axis.ticks.y = element_blank(),
  axis.text.x = element_blank()
  #axis.ticks.x = element_blank()
)

##remove NA when using summarize function in dplyr##
##ref to this website https://stackoverflow.com/questions/25759891/dplyr-summarise-each-with-na-rm

##create a list of empty list of data frames to store analysis output in r##
listOfDataFrames <- vector(mode = "list", length = 100)

for (i in 1:100) {
  listOfDataFrames[[i]] <- data.frame(a=sample(letters, 500, rep=T),
                                      b=rnorm(500), c=rnorm(500))
}

df <- do.call("rbind", listOfDataFrames)

##select a variable without using $ in data frame, convenient for doing test or analysis on all or some specific columns with them added as an argument##
# Refer to column names stored as strings with the `.data` pronoun:
var <- "mass"
var <- args[1] ##can change args in Rscript ***.R args[1], these columns can all be analyzed.
summarise(starwars, avg = mean(.data[[var]], na.rm = TRUE))

# use below code to check which heatmap color you want to apply#
barplot(1:5, col=rev(heat.colors(2))) 


##write out multiple dfs into sheets of excel##
require(openxlsx)
list_of_datasets <- list("tumor.vs.normal"=degs.2vs1.sub,"meta.vs.normal" = degs.3vs1.sub, "meta.vs.tumor" = degs.3vs2.sub)
write.xlsx(list_of_datasets, file = "tcga.vs.su2c.proteincoding.SD_new_all.xlsx")

# save large data file in rds format or save current work space for later use 
# reference link http://www.sthda.com/english/wiki/saving-data-into-r-data-format-rds-and-rdata
Save and restore one single R object: saveRDS(object, file), my_data <- readRDS(file)
Save and restore multiple R objects: save(data1, data2, file = “my_data.RData”), load(“my_data.RData”)
Save and restore your entire workspace: save.image(file = “my_work_space.RData”), load(“my_work_space.RData”)

# how to use which function 
which function return the index row number when the which() statement is true
For example 
matched1<-which(t_location$initial==1&t_location$LOC_CD==M[1,1]) # this will return the row number of t_location when the condition is true, in this example, the returned value for matched1 is 5 as row 5 of t_location met the criteria

